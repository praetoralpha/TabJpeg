package TabJpeg;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Collections;
import java.util.List;
import javax.imageio.ImageIO;
import javax.imageio.stream.FileImageInputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author alpha
 */
public class TabJpeg extends javax.swing.JFrame {
    private static String DEFAULT_TITLE = "TabJpeg";
    /**
     * Creates new form TabJpeg
     */
    public TabJpeg() {
        initComponents();
        new DropTarget(this, new DropTargetListener() {
            @Override
            public void dragEnter(DropTargetDragEvent dtde) {}
            @Override
            public void dragOver(DropTargetDragEvent dtde) {}
            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {}
            @Override
            public void dragExit(DropTargetEvent dte) {}
            @Override
            public void drop(DropTargetDropEvent dtde) {
                Transferable transferable = dtde.getTransferable();
                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrop(dtde.getDropAction());
                    try {
                        List transferData = (List) transferable.getTransferData(DataFlavor.javaFileListFlavor);
                        selectedFile = (File) transferData.get(0);
                        dtde.dropComplete(true);
                        requestEncode();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        saveFileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || file.getName().matches(".+\\.jpg");
            }
            @Override
            public String getDescription() {
                return "JPG Image";
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chromaGroup = new javax.swing.ButtonGroup();
        openFileChooser = new javax.swing.JFileChooser();
        saveFileChooser = new javax.swing.JFileChooser();
        tuningGroup = new javax.swing.ButtonGroup();
        MainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        OpenButton = new javax.swing.JButton();
        InputLabel = new javax.swing.JLabel();
        OutputPanel = new javax.swing.JPanel();
        xSpinner = new javax.swing.JSpinner();
        xLabel = new javax.swing.JLabel();
        ySpinner = new javax.swing.JSpinner();
        ResizeButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        chroma420 = new javax.swing.JRadioButton();
        chroma422 = new javax.swing.JRadioButton();
        chroma440 = new javax.swing.JRadioButton();
        chroma444 = new javax.swing.JRadioButton();
        grayscale = new javax.swing.JRadioButton();
        chroma411 = new javax.swing.JRadioButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        tuninghvs = new javax.swing.JRadioButton();
        tuningpsnr = new javax.swing.JRadioButton();
        tuningssim = new javax.swing.JRadioButton();
        tuningmssim = new javax.swing.JRadioButton();
        qualitySlider = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        SaveButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        outputImage = new javax.swing.JLabel();

        openFileChooser.setDialogTitle("Open image");

        saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveFileChooser.setDialogTitle("Save JPG");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(DEFAULT_TITLE);
        setMinimumSize(new java.awt.Dimension(600, 400));

        MainPanel.setAlignmentX(0.0F);
        MainPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        MainPanel.setPreferredSize(new java.awt.Dimension(1000, 700));
        MainPanel.setLayout(new javax.swing.BoxLayout(MainPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        OpenButton.setText("Open File");
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });
        jPanel1.add(OpenButton);

        InputLabel.setText("Select a file or drag and drop to encode");
        jPanel1.add(InputLabel);

        MainPanel.add(jPanel1);

        OutputPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        xSpinner.setMaximumSize(new java.awt.Dimension(100, 28));
        xSpinner.setPreferredSize(new java.awt.Dimension(100, 28));
        OutputPanel.add(xSpinner);

        xLabel.setText("Ã—");
        OutputPanel.add(xLabel);

        ySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        ySpinner.setMaximumSize(new java.awt.Dimension(100, 28));
        ySpinner.setPreferredSize(new java.awt.Dimension(100, 28));
        OutputPanel.add(ySpinner);

        ResizeButton.setText("Resize");
        ResizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeButtonActionPerformed(evt);
            }
        });
        OutputPanel.add(ResizeButton);

        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });
        OutputPanel.add(ResetButton);

        chromaGroup.add(chroma420);
        chroma420.setSelected(true);
        chroma420.setText("4:2:0 (2x2)");
        chroma420.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(chroma420);
        chroma420.getAccessibleContext().setAccessibleDescription("2x2");

        chromaGroup.add(chroma422);
        chroma422.setText("4:2:2 (2x1)");
        chroma422.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(chroma422);
        chroma422.getAccessibleContext().setAccessibleDescription("2x1");

        chromaGroup.add(chroma440);
        chroma440.setText("4:4:0 (1x2)");
        chroma440.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(chroma440);
        chroma440.getAccessibleContext().setAccessibleDescription("1x2");

        chromaGroup.add(chroma444);
        chroma444.setText("4:4:4 (1x1)");
        chroma444.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(chroma444);
        chroma444.getAccessibleContext().setAccessibleDescription("1x1");

        chromaGroup.add(grayscale);
        grayscale.setText("grayscale");
        grayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(grayscale);
        grayscale.getAccessibleContext().setAccessibleDescription("0x0");

        chromaGroup.add(chroma411);
        chroma411.setText("4:1:1 (4x1)");
        chroma411.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(chroma411);
        chroma411.getAccessibleContext().setAccessibleDescription("4x1");

        OutputPanel.add(filler1);

        tuningGroup.add(tuninghvs);
        tuninghvs.setSelected(true);
        tuninghvs.setText("HVS");
        tuninghvs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(tuninghvs);
        tuninghvs.getAccessibleContext().setAccessibleDescription("hvs-psnr");

        tuningGroup.add(tuningpsnr);
        tuningpsnr.setText("PSNR");
        tuningpsnr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(tuningpsnr);
        tuningpsnr.getAccessibleContext().setAccessibleDescription("psnr");

        tuningGroup.add(tuningssim);
        tuningssim.setText("SSIM");
        tuningssim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(tuningssim);
        tuningssim.getAccessibleContext().setAccessibleDescription("ssim");

        tuningGroup.add(tuningmssim);
        tuningmssim.setText("MSSIM");
        tuningmssim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromaActionPerformed(evt);
            }
        });
        OutputPanel.add(tuningmssim);
        tuningmssim.getAccessibleContext().setAccessibleDescription("ms-ssim");

        MainPanel.add(OutputPanel);

        qualitySlider.setMajorTickSpacing(1);
        qualitySlider.setPaintTicks(true);
        qualitySlider.setValue(70);
        qualitySlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                qualitySliderMouseReleased(evt);
            }
        });
        qualitySlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qualitySliderKeyReleased(evt);
            }
        });
        MainPanel.add(qualitySlider);

        jPanel2.setBackground(new java.awt.Color(48, 48, 48));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        SaveButton.setText("Save File");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        jPanel2.add(SaveButton);

        outputLabel.setForeground(new java.awt.Color(170, 170, 170));
        outputLabel.setText("Select a file or drag and drop to encode");
        jPanel2.add(outputLabel);

        MainPanel.add(jPanel2);

        jPanel3.setBackground(new java.awt.Color(32, 32, 32));
        jPanel3.setPreferredSize(new java.awt.Dimension(32767, 32767));

        outputImage.setBackground(new java.awt.Color(1, 1, 1));
        outputImage.setMaximumSize(new java.awt.Dimension(32767, 32767));
        outputImage.setPreferredSize(new java.awt.Dimension(960, 600));
        jPanel3.add(outputImage);

        MainPanel.add(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1340, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chromaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chromaActionPerformed
        requestEncode();
    }//GEN-LAST:event_chromaActionPerformed

    private void qualitySliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qualitySliderMouseReleased
        requestEncode();
    }//GEN-LAST:event_qualitySliderMouseReleased

    private void qualitySliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qualitySliderKeyReleased
        requestEncode();
    }//GEN-LAST:event_qualitySliderKeyReleased

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        openFile();
    }//GEN-LAST:event_OpenButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        saveFile();
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        resetDimensions(true);
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void ResizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeButtonActionPerformed
        requestEncode();
    }//GEN-LAST:event_ResizeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(TabJpeg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TabJpeg window = new TabJpeg();
                window.setVisible(true);
            }
        });
    }
    BufferedImage selected;
    File selectedFile;
    private synchronized void requestEncode() {
        if (selectedFile == null){
            return;
        }
        try {
            openFileChooser.setSelectedFile(selectedFile);
            selected = ImageIO.read(new FileImageInputStream(selectedFile));
            this.setTitle(DEFAULT_TITLE + ": " + selectedFile.getName());
            InputLabel.setText(String.format("Input size: %.2f kb, dimensions: %dÃ—%d", selectedFile.length()/1024.0, selected.getWidth(), selected.getHeight()));
            if (0 == (Integer)xSpinner.getValue() || 0 == (Integer)ySpinner.getValue()){
                resetDimensions(false);
            } else if (selected.getHeight() != (Integer)xSpinner.getValue() || selected.getWidth() != (Integer)ySpinner.getValue()){
                selected = toBufferedImage(selected.getScaledInstance((Integer)xSpinner.getValue(), (Integer)ySpinner.getValue(), Image.SCALE_SMOOTH));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }
        EncoderExecutor.getEncoderExecutor().resetLastrun();
        String chroma = "2x2";
        for (Object b : Collections.list(chromaGroup.getElements())) {
            JRadioButton r = (JRadioButton) b;
            if (r.isSelected()) {
                chroma = r.getAccessibleContext().getAccessibleDescription();
                break;
            }
        }
        String tuning = "-tune-hvs-psnr";
        for (Object b : Collections.list(tuningGroup.getElements())) {
            JRadioButton r = (JRadioButton) b;
            if (r.isSelected()) {
                tuning = "-tune-" + r.getAccessibleContext().getAccessibleDescription();
                break;
            }
        }
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(10*1024*1024);
            ImageIO.write(selected, "BMP", baos);
            baos.close();
            byte[] output = EncoderExecutor.getEncoderExecutor().encode(baos.toByteArray(),
             //new ByteArrayInputStream(baos.toByteArray()), 
             (int)xSpinner.getValue(), 
             (int)ySpinner.getValue(), 
             qualitySlider.getValue(), 
             chroma, 
             tuning
             );
            ImageIcon outputicon = new ImageIcon(output);
            outputImage.setIcon(outputicon);
            outputImage.setPreferredSize(new Dimension(outputicon.getIconWidth(), outputicon.getIconHeight()));
            outputLabel.setText(String.format("output size: %.2f kb, quality: "+qualitySlider.getValue(), output.length/1024.0));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    private void resetDimensions(boolean encode) {
        try {
            if (selectedFile != null) {
                BufferedImage tempimage = ImageIO.read(new FileImageInputStream(selectedFile));
                if (tempimage.getWidth() != (Integer) xSpinner.getValue() || tempimage.getHeight() != (Integer) ySpinner.getValue()) {
                    xSpinner.setValue(tempimage.getWidth());
                    ySpinner.setValue(tempimage.getHeight());
                    if (encode && 0 != (Integer) xSpinner.getValue() && 0 != (Integer) ySpinner.getValue()) {
                        requestEncode();
                    }
                }
            }
        } catch (Exception ex) { }
    }
    private void saveFile(){
        if (selectedFile != null){
            String name = selectedFile.getName();
            if (name.lastIndexOf(".") != -1){
                name = name.substring(0, name.lastIndexOf("."));
            }
            name += ".jpg";
            File directory = saveFileChooser.getCurrentDirectory();
            saveFileChooser.setSelectedFile(new File(directory.getAbsolutePath()+File.separator+name));
        }
        if(saveFileChooser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            FileOutputStream out = null;
            try {
                out = new FileOutputStream(saveFileChooser.getSelectedFile());
                out.write(EncoderExecutor.getEncoderExecutor().getLastrun());
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    out.close();
                } catch (Exception ex) {
                }
            }
        }
    }
    private void openFile(){
        if(openFileChooser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            selectedFile = openFileChooser.getSelectedFile();
            requestEncode();
        }
    }

    public BufferedImage toBufferedImage(Image input) throws InterruptedException {
        if (input instanceof BufferedImage) {
            return (BufferedImage) input;
        }
        while (input.getWidth(null) == -1 && input.getHeight(null) == -1){
            System.out.println("waiting....");
            Thread.sleep(100);
        }
        BufferedImage bimage = new BufferedImage(input.getWidth(null), input.getHeight(null), BufferedImage.TYPE_INT_RGB);
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(input, 0, 0, null);
        bGr.dispose();
        return bimage;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InputLabel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton OpenButton;
    private javax.swing.JPanel OutputPanel;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton ResizeButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JRadioButton chroma411;
    private javax.swing.JRadioButton chroma420;
    private javax.swing.JRadioButton chroma422;
    private javax.swing.JRadioButton chroma440;
    private javax.swing.JRadioButton chroma444;
    private javax.swing.ButtonGroup chromaGroup;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JRadioButton grayscale;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JLabel outputImage;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JSlider qualitySlider;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.ButtonGroup tuningGroup;
    private javax.swing.JRadioButton tuninghvs;
    private javax.swing.JRadioButton tuningmssim;
    private javax.swing.JRadioButton tuningpsnr;
    private javax.swing.JRadioButton tuningssim;
    private javax.swing.JLabel xLabel;
    private javax.swing.JSpinner xSpinner;
    private javax.swing.JSpinner ySpinner;
    // End of variables declaration//GEN-END:variables
}
